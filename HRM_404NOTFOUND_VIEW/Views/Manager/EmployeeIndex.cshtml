@{
    Layout = "~/Views/Shared/_ManagerLayout.cshtml";
    ViewData["Title"] = "Home Page";
}
<style>
    html {
        font-size: 14px;
        font-family: Arial, Helvetica, sans-serif;
    }</style>
<title></title>

<div>
    <h3>Project Management</h3>
    <hr />
</div>
<div id="example">
    <div id="detailEmployeeGrid"></div>
    <div id="bonusEmployee"></div>
</div>

<script type="text/x-kendo-template" id="templateBonus">
        <div id="rejectLeaveLogs-container">

        <label class="control-label">Current Bonus of the Project:</label>
        <input id="currentBonus" readonly type="number" class="k-textbox" />

        <label class="control-label">Description:</label>
        <textarea id="descriptionInput" class="k-textbox" style="width: 100%;" required data-role="textarea"
            data-required-msg="Please enter a reason for rejection." data-custom-validator="onlyLettersValidator"
            data-invalid-msg="Only letters are allowed"></textarea>
        <div class="k-invalid-msg" data-for="descriptionInput" style="color: red;"></div>

        <label class="control-label">Bonus:</label>
        <input id="bonusInput" oninput="checkValueBonus" class="k-textbox" type="number" min="10000"
            required data-role="numerictextbox" data-required-msg="Please enter a number greater than 10000."
            data-custom-validator="bonusValidator"
            data-invalid-msg="Please enter a valid number greater than 10,000.">
        <div class="k-invalid-msg" data-for="bonusInput" style="color: red;"></div>

        <button class="btn btn-info" id="AddBonusBtn">Confirm</button>
        <button class="btn btn-warning float-right" id="closeBtn">Close</button>
    </div>
</script>

<script>
    var wnd,
        bonusTemplate;
    $(document).ready(function () {
        $("#detailEmployeeGrid").kendoGrid({
            dataSource: {
                transport: {
                    read: function (options) {
                        $.ajax({
                            url: "https://localhost:5000/api/Employee/manager-all/" + sessionStorage.getItem('EMPLOYEE_ID'),
                            type: "GET",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
                            },
                            success: function (result) {
                                options.success(result);
                            },
                            error: function (result) {
                                options.error(result);
                            }
                        });
                    }
                },
                schema: {
                    data: "data",
                    model: {
                        id: "employeeID",
                        fields: {
                            employeeID: { type: "number" },
                            employeeName: { type: "string" },
                            address: { type: "string" },
                            gender: { type: "string" },
                            phoneNumber: { type: "string" },
                            emailAddress: { type: "string" },
                            birthDate: { type: "date" },
                            userName: { type: "string" },
                            employeeStatus: { type: "string" },
                        }
                    }
                },
                pageSize: 20
            },
            height: 550,
            sortable: true,
            filterable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [{
                field: "employeeID",
                title: "ID",
                filterable: { multi: true },
            }, {
                field: "employeeName",
                title: "Employee Name",
                filterable: { multi: true },
                width: 120,
                template: "#= truncateString(employeeName, 30) #"
            }, {
                field: "address",
                title: "Address",
                filterable: {
                    multi: true
                },
                width: 120,
                template: "#= truncateString(address, 30) #"
            }, {
                field: "gender",
                title: "Gender",
                filterable: { multi: true },
                width: 120
            }, {
                field: "phoneNumber",
                title: "Phone",
                filterable: { multi: true },
                width: 120,
            }, {
                field: "emailAddress",
                title: "Email",
                filterable: { multi: true },
                width: 120,
            }, {
                field: "birthDate",
                title: "BirthDate",
                filterable: { multi: true },
                format: "{0:dd-MM-yyyy}",
                width: 120,
            }, {
                field: "userName",
                title: "User Name",
                filterable: { multi: true },
                width: 120,
            }, { command: { text: "Add Bonus", click: addBonusDialog }, title: " ", width: "80" },]
        });
        wnd = $("#bonusEmployee")
            .kendoWindow({
                title: "Add Bonus For Employee",
                modal: true,
                visible: false,
                resizable: false,
                width: 400
            }).data("kendoWindow");
        bonusTemplate = kendo.template($("#templateBonus").html());
    });

    function addBonusDialog(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        wnd.content(bonusTemplate(dataItem));
        getProjectApi();
        $("#closeBtn").on("click", function () {
            wnd.close();
        });

        $("#AddBonusBtn").on("click", function () {
            var descriptionInput = $("#descriptionInput");
            var description = descriptionInput.val();
            if (!onlyLettersValidator(descriptionInput)) {
                var errorMsgElement = descriptionInput.next(".k-invalid-msg");
                errorMsgElement.text("This field is required and only letters are allowed").show();
                return;
            }

            var bonusInput = $("#bonusInput");
            var bonusValue = bonusInput.val();
            if (!onlyLettersValidator(bonusInput)) {
                var errorMsgElement = bonusInput.next(".k-invalid-msg");
                errorMsgElement.text("This field is required and greater than 10 000").show();
                return;
            }

            addBonusApi(dataItem.employeeID, description, bonusValue);
            wnd.close();
        });

        wnd.center().open();
    }

    function addBonusApi(id, reason, bonusValue) {
        $.ajax({
            url: "https://localhost:5000/api/Bonus",
            type: "POST",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
            },
            data: JSON.stringify({
                description: reason,
                bonusValue: bonusValue,
                employeeID: id
            }),
            contentType: "application/json",
            success: function (result) {
                demo.showNotification(result['data'], 1);
            },
            error: function (result) {
                demo.showNotification("An error has occurred in the system, please contact the administrator.", 4);
            }
        });
    }

    function getProjectApi() {
        $.ajax({
            url: "https://localhost:5000/api/Project/manager/" + sessionStorage.getItem('EMPLOYEE_ID'),
            type: "GET",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
            },
            success: function (result) {
                $("#currentBonus").val(JSON.parse(result['data'].projectBonus));
            },
            error: function (result) {
            }
        });
    }

    function onlyLettersValidator(input) {
        if (input.is("[data-custom-validator=onlyLettersValidator]")) {
            var value = input.val();
            if (value == null || value == '' || !/^[a-zA-Z ]+$/.test(value)) {
                return false;
            }
        }
        return true;
    }

    function bonusValidator(input) {
        if (input.is("[data-custom-validator=bonusValidator]")) {
            var value = input.val();
            console.log('bonusValidator');
            if (value == null || value < 10000) {
                return false;
            }
        }
        return true;
    }

    function checkValueBonus(input) {
        console.log('checkValueBonus');
        if (input.is("[data-custom-validator=bonusValidator]")) {
            var value = input.val();
            if (value == null || value < 10000) {
                return false;
            }
        }
        return true;
    }
</script>
