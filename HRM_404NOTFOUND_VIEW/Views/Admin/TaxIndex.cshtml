@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Tax";
}
<style>
    html {
        font-size: 14px;
        font-family: Arial, Helvetica, sans-serif;
    }</style>

<div>
    <h3>Tax Management</h3>
    <hr />
</div>
<div id="example">
    <div class="mt-2">
        <a href="/Admin/CreateTax" class="btn btn-info">Create new Tax</a>
        <hr />
    </div>
    <div id="taxGrid"></div>
</div>
<script>

    $(document).ready(function () {
        $("#taxGrid").kendoGrid({
            dataSource: {
                transport: {
                    read: function (options) {
                        $.ajax({
                            url: "https://localhost:5000/api/Tax",
                            type: "GET",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
                            },
                            success: function (result) {
                                options.success(result);
                            },
                            error: function (result) {
                                options.error(result);
                            }
                        });
                    },
                    destroy: function (options) {
                        var taxIDToDelete = options.data.taxID;
                        $.ajax({
                            url: "https://localhost:5000/api/Tax/" + taxIDToDelete,
                            type: "DELETE",
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
                            },
                            success: function (result) {
                                options.success(result);
                            },
                            error: function (result) {
                                options.error(result);
                            }
                        });
                    },
                    update: function (options) {
                        var taxIDToUpdate = options.data.taxID;
                        var newData = options.data;
                        $.ajax({
                            url: "https://localhost:5000/api/Tax/" + taxIDToUpdate,
                            type: "PUT", // Use the appropriate HTTP method for updating (e.g., PUT or PATCH)
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
                            },
                            dataType: "json",
                            contentType: 'application/json',
                            data: JSON.stringify({
                                salaryMin: newData.salaryMin,
                                salaryMax: newData.salaryMax,
                                percent: newData.percent
                            }),
                            success: function (result) {
                                options.success(result);
                            },
                            error: function (result) {
                                options.error(result);
                            }
                        });
                    },
                    create: function (options) {
                        var newData = options.data; // Assuming the new data is included in the options.data object

                        $.ajax({
                            url: "https://localhost:5000/api/Tax",
                            type: "POST", // Use the appropriate HTTP method for creating
                            beforeSend: function (xhr) {
                                xhr.setRequestHeader("Authorization", "Bearer " + sessionStorage.getItem('ACCESS_TOKEN'));
                            },
                            data: newData, // Send the new data in the request payload
                            success: function (result) {
                                options.success(result);
                            },
                            error: function (result) {
                                options.error(result);
                            }
                        });
                    }

                },
                schema: {
                    data: "data",
                    model: {
                        id: "taxID",
                        fields: {
                            taxID: { type: "number" },
                            salaryMin: { type: "number" },
                            salaryMax: { type: "number" },
                            percent: { type: "number" },
                            timestamp: { type: "date" },
                            taxStatus: { type: "string" }

                        }
                    }
                },
                pageSize: 20
            },
            height: 550,
            sortable: true,
            filterable: true,
            editable: {
                mode: "popup",
                window: {
                    title: "Update Tax",
                    animation: true
                }
            },
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
                {
                    field: "salaryMin",
                    title: "Salary Min",
                    filterable: { multi: true }

                }, {
                    field: "timestamp",
                    title: "Date",
                    filterable: {
                        multi: true
                    },
                    format: "{0:dd-MM-yyyy}"
                }, {
                    field: "salaryMax",
                    title: "Salary Max",
                    filterable: { multi: true }

                }, {
                    field: "percent",
                    title: "Percent",
                    filterable: { multi: true },
                    format: "{0:p0}"
                },
                {
                    field: "taxStatus",
                    title: "Status",
                    filterable: { multi: true }

                },
                {
                    command: ["edit", "destroy"],
                    title: "&nbsp;",
                    width: "250px"
                }],
            edit: function (e) {
                if (e.model.taxStatus) {
                    e.container.find("input[name=taxStatus]").prop("disabled", true);
                }
                if (e.model.timestamp) {
                    e.container.find("input[name=timestamp]").prop("disabled", true);
                }
            }
        });
    });
</script>
